initSidebarItems({"struct":[["LUT_CTL_SPEC","LUT component control register"],["LUT_OPC_R","Field `LUT_OPC` reader - LUT opcode specifies the LUT operation: ‘0’: Combinatoral output, no feedback. tr_out = LUT[{tr2_in, tr1_in, tr0_in}]. ‘1’: Combinatorial output, feedback. tr_out = LUT[{lut_reg, tr1_in, tr0_in}]. On clock: lut_reg <= tr_in2. ‘2’: Sequential output, no feedback. temp = LUT[{tr2_in, tr1_in, tr0_in}]. tr_out = lut_reg. On clock: lut_reg <= temp. ‘3’: Register with asynchronous set and reset. tr_out = lut_reg. enable = (tr2_in ^ LUT[4]) | LUT[5]. set = enable & (tr1_in ^ LUT[2]) & LUT[3]. clr = enable & (tr0_in ^ LUT[0]) & LUT[1]. Asynchronously (no clock required): lut_reg <= if (clr) ‘0’ else if (set) ‘1’"],["LUT_OPC_W","Field `LUT_OPC` writer - LUT opcode specifies the LUT operation: ‘0’: Combinatoral output, no feedback. tr_out = LUT[{tr2_in, tr1_in, tr0_in}]. ‘1’: Combinatorial output, feedback. tr_out = LUT[{lut_reg, tr1_in, tr0_in}]. On clock: lut_reg <= tr_in2. ‘2’: Sequential output, no feedback. temp = LUT[{tr2_in, tr1_in, tr0_in}]. tr_out = lut_reg. On clock: lut_reg <= temp. ‘3’: Register with asynchronous set and reset. tr_out = lut_reg. enable = (tr2_in ^ LUT[4]) | LUT[5]. set = enable & (tr1_in ^ LUT[2]) & LUT[3]. clr = enable & (tr0_in ^ LUT[0]) & LUT[1]. Asynchronously (no clock required): lut_reg <= if (clr) ‘0’ else if (set) ‘1’"],["LUT_R","Field `LUT` reader - LUT configuration. Depending on the LUT opcode LUT_OPC, the internal state lut_reg (captured in a flip-flop) and the LUT input signals tr0_in, tr1_in, tr2_in, the LUT configuration is used to determine the LUT output signal and the next sequential state (lut_reg)."],["LUT_W","Field `LUT` writer - LUT configuration. Depending on the LUT opcode LUT_OPC, the internal state lut_reg (captured in a flip-flop) and the LUT input signals tr0_in, tr1_in, tr2_in, the LUT configuration is used to determine the LUT output signal and the next sequential state (lut_reg)."],["R","Register `LUT_CTL[%s]` reader"],["W","Register `LUT_CTL[%s]` writer"]]});