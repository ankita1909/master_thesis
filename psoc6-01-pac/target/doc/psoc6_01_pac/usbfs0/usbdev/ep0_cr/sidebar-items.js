initSidebarItems({"enum":[["ACKED_TXN_A","The ACK’d transaction bit is set whenever the SIE engages in a transaction to the register’s endpoint that completes with an ACK packet. This bit is cleared by any writes to the register."],["MODE_A","The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint."]],"struct":[["ACKED_TXN_R","Field `ACKED_TXN` reader - The ACK’d transaction bit is set whenever the SIE engages in a transaction to the register’s endpoint that completes with an ACK packet. This bit is cleared by any writes to the register."],["ACKED_TXN_W","Field `ACKED_TXN` writer - The ACK’d transaction bit is set whenever the SIE engages in a transaction to the register’s endpoint that completes with an ACK packet. This bit is cleared by any writes to the register."],["EP0_CR_SPEC","Endpoint0 control Register"],["IN_RCVD_R","Field `IN_RCVD` reader - When set this bit indicates a valid IN packet has been received. This bit is updated to ‘1’ after the host acknowledges an IN data packet. When clear this bit indicates either no IN has been received or that the host did not acknowledge the IN data by sending ACK handshake. It is cleared by any writes to the register."],["IN_RCVD_W","Field `IN_RCVD` writer - When set this bit indicates a valid IN packet has been received. This bit is updated to ‘1’ after the host acknowledges an IN data packet. When clear this bit indicates either no IN has been received or that the host did not acknowledge the IN data by sending ACK handshake. It is cleared by any writes to the register."],["MODE_R","Field `MODE` reader - The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint."],["MODE_W","Field `MODE` writer - The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint."],["OUT_RCVD_R","Field `OUT_RCVD` reader - When set this bit indicates a valid OUT packet has been received and ACKed. This bit is updated to ‘1’ after the last received packet in an OUT transaction. When clear this bit indicates no OUT received. It is cleared by any writes to the register."],["OUT_RCVD_W","Field `OUT_RCVD` writer - When set this bit indicates a valid OUT packet has been received and ACKed. This bit is updated to ‘1’ after the last received packet in an OUT transaction. When clear this bit indicates no OUT received. It is cleared by any writes to the register."],["R","Register `EP0_CR` reader"],["SETUP_RCVD_R","Field `SETUP_RCVD` reader - When set this bit indicates a valid SETUP packet was received and ACKed. This bit is forced HIGH from the start of the data packet phase of the SETUP transaction until the start of the ACK packet returned by the SIE. The CPU is prevented from clearing this bit during this interval. After this interval the bit will remain set until cleared by firmware. While this bit is set to ‘1’ the CPU cannot write to the EP0_DRx registers. This prevents firmware from overwriting an incoming SETUP transaction before firmware has a chance to read the SETUP data. This bit is cleared by any non-locked writes to the register."],["SETUP_RCVD_W","Field `SETUP_RCVD` writer - When set this bit indicates a valid SETUP packet was received and ACKed. This bit is forced HIGH from the start of the data packet phase of the SETUP transaction until the start of the ACK packet returned by the SIE. The CPU is prevented from clearing this bit during this interval. After this interval the bit will remain set until cleared by firmware. While this bit is set to ‘1’ the CPU cannot write to the EP0_DRx registers. This prevents firmware from overwriting an incoming SETUP transaction before firmware has a chance to read the SETUP data. This bit is cleared by any non-locked writes to the register."],["W","Register `EP0_CR` writer"]]});