initSidebarItems({"struct":[["DATA_WIDTH_R","Field `DATA_WIDTH` reader - Dataframe width. DATA_WIDTH + 1 is the expected amount of bits in received data frame. This number does not include start, parity and stop bits. For UART mode, the valid range is [3, 8]. For SPI, the valid range is [3, 15]. For I2C the only valid value is 7. In EZ mode (for both SPI and I2C), the only valid value is 7."],["DATA_WIDTH_W","Field `DATA_WIDTH` writer - Dataframe width. DATA_WIDTH + 1 is the expected amount of bits in received data frame. This number does not include start, parity and stop bits. For UART mode, the valid range is [3, 8]. For SPI, the valid range is [3, 15]. For I2C the only valid value is 7. In EZ mode (for both SPI and I2C), the only valid value is 7."],["MEDIAN_R","Field `MEDIAN` reader - Median filter. When ‘1’, a digital 3 taps median filter is performed on input interface lines. This filter should reduce the susceptibility to errors. However, its requires higher oversampling values. For UART IrDA submode, this field should always be ‘1’."],["MEDIAN_W","Field `MEDIAN` writer - Median filter. When ‘1’, a digital 3 taps median filter is performed on input interface lines. This filter should reduce the susceptibility to errors. However, its requires higher oversampling values. For UART IrDA submode, this field should always be ‘1’."],["MSB_FIRST_R","Field `MSB_FIRST` reader - Least significant bit first (‘0’) or most significant bit first (‘1’). For I2C, this field should be ‘1’."],["MSB_FIRST_W","Field `MSB_FIRST` writer - Least significant bit first (‘0’) or most significant bit first (‘1’). For I2C, this field should be ‘1’."],["R","Register `RX_CTRL` reader"],["RX_CTRL_SPEC","Receiver control"],["W","Register `RX_CTRL` writer"]]});