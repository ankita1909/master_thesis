initSidebarItems({"struct":[["I2C_ACK_R","Field `I2C_ACK` reader - Logical and of corresponding request and mask bits."],["I2C_ADDR_MATCH_R","Field `I2C_ADDR_MATCH` reader - Logical and of corresponding request and mask bits."],["I2C_ARB_LOST_R","Field `I2C_ARB_LOST` reader - Logical and of corresponding request and mask bits."],["I2C_BUS_ERROR_R","Field `I2C_BUS_ERROR` reader - Logical and of corresponding request and mask bits."],["I2C_GENERAL_R","Field `I2C_GENERAL` reader - Logical and of corresponding request and mask bits."],["I2C_NACK_R","Field `I2C_NACK` reader - Logical and of corresponding request and mask bits."],["I2C_START_R","Field `I2C_START` reader - Logical and of corresponding request and mask bits."],["I2C_STOP_R","Field `I2C_STOP` reader - Logical and of corresponding request and mask bits."],["I2C_WRITE_STOP_R","Field `I2C_WRITE_STOP` reader - Logical and of corresponding request and mask bits."],["INTR_S_MASKED_SPEC","Slave interrupt masked request"],["R","Register `INTR_S_MASKED` reader"],["SPI_BUS_ERROR_R","Field `SPI_BUS_ERROR` reader - Logical and of corresponding request and mask bits."],["SPI_EZ_STOP_R","Field `SPI_EZ_STOP` reader - Logical and of corresponding request and mask bits."],["SPI_EZ_WRITE_STOP_R","Field `SPI_EZ_WRITE_STOP` reader - Logical and of corresponding request and mask bits."]]});