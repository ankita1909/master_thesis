initSidebarItems({"struct":[["CM4_CTL_SPEC","CM4 control"],["DZC_MASK_R","Field `DZC_MASK` reader - CPU FPU exception mask for the CPU’s FPCSR.DZC ‘divide by zero’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt."],["DZC_MASK_W","Field `DZC_MASK` writer - CPU FPU exception mask for the CPU’s FPCSR.DZC ‘divide by zero’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt."],["IDC_MASK_R","Field `IDC_MASK` reader - CPU FPU exception mask for the CPU’s FPCSR.IDC ‘input denormalized’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt. Note: if the CPU FPCSR.FZ field is set to ‘1’, denormalized inputs are ‘flushed to zero’. Dependent on the FPU algorithm, this may or may not occur frequently. To prevent frequent CPU FPU interrupts as a result of denormalized inputs, this field may be set to ‘0’."],["IDC_MASK_W","Field `IDC_MASK` writer - CPU FPU exception mask for the CPU’s FPCSR.IDC ‘input denormalized’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt. Note: if the CPU FPCSR.FZ field is set to ‘1’, denormalized inputs are ‘flushed to zero’. Dependent on the FPU algorithm, this may or may not occur frequently. To prevent frequent CPU FPU interrupts as a result of denormalized inputs, this field may be set to ‘0’."],["IOC_MASK_R","Field `IOC_MASK` reader - CPU floating point unit (FPU) exception mask for the CPU’s FPCSR.IOC ‘invalid operation’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt. Note: the ARM architecture does NOT support FPU exceptions; i.e. there is no precise FPU exception handler. Instead, FPU conditions are captured in the CPU’s FPCSR register and the conditions are provided as CPU interface signals. The interface signals are ‘masked’ with the fields a provide by this register (CM7_0_CTL). The ‘masked’ signals are reduced/OR-ed into a single CPU floating point interrupt signal. The associated CPU interrupt handler allows for imprecise handling of FPU exception conditions. Note: the CPU’s FPCSR exception conditions are ‘sticky’. Typically, the CPU FPU interrupt handler will clear the exception condition(s) to ‘0’. Note: by default, the FPU exception masks are ‘0’. Therefore, FPU exception conditions will NOT activate the CPU’s floating point interrupt."],["IOC_MASK_W","Field `IOC_MASK` writer - CPU floating point unit (FPU) exception mask for the CPU’s FPCSR.IOC ‘invalid operation’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt. Note: the ARM architecture does NOT support FPU exceptions; i.e. there is no precise FPU exception handler. Instead, FPU conditions are captured in the CPU’s FPCSR register and the conditions are provided as CPU interface signals. The interface signals are ‘masked’ with the fields a provide by this register (CM7_0_CTL). The ‘masked’ signals are reduced/OR-ed into a single CPU floating point interrupt signal. The associated CPU interrupt handler allows for imprecise handling of FPU exception conditions. Note: the CPU’s FPCSR exception conditions are ‘sticky’. Typically, the CPU FPU interrupt handler will clear the exception condition(s) to ‘0’. Note: by default, the FPU exception masks are ‘0’. Therefore, FPU exception conditions will NOT activate the CPU’s floating point interrupt."],["IXC_MASK_R","Field `IXC_MASK` reader - CPU FPU exception mask for the CPU’s FPCSR.IXC ‘inexact’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt. Note: the ‘inexact’ condition is set as a result of rounding. Rounding may occur frequently and is typically not an error condition. To prevent frequent CPU FPU interrupts as a result of rounding, this field is typically set to ‘0’."],["IXC_MASK_W","Field `IXC_MASK` writer - CPU FPU exception mask for the CPU’s FPCSR.IXC ‘inexact’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt. Note: the ‘inexact’ condition is set as a result of rounding. Rounding may occur frequently and is typically not an error condition. To prevent frequent CPU FPU interrupts as a result of rounding, this field is typically set to ‘0’."],["OFC_MASK_R","Field `OFC_MASK` reader - CPU FPU exception mask for the CPU’s FPCSR.OFC ‘overflow’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt."],["OFC_MASK_W","Field `OFC_MASK` writer - CPU FPU exception mask for the CPU’s FPCSR.OFC ‘overflow’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt."],["R","Register `CM4_CTL` reader"],["UFC_MASK_R","Field `UFC_MASK` reader - CPU FPU exception mask for the CPU’s FPCSR.UFC ‘underflow’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt."],["UFC_MASK_W","Field `UFC_MASK` writer - CPU FPU exception mask for the CPU’s FPCSR.UFC ‘underflow’ exception condition: ‘0’: The CPU’s exception condition does NOT activate the CPU’s floating point interrupt. ‘1’: the CPU’s exception condition activates the CPU’s floating point interrupt."],["W","Register `CM4_CTL` writer"]]});