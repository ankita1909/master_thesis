initSidebarItems({"struct":[["I2C_ACK_R","Field `I2C_ACK` reader - I2C slave acknowledgement received. Set to ‘1’, when the slave receives a ACK (typically after the slave transmitted TX data)."],["I2C_ACK_W","Field `I2C_ACK` writer - I2C slave acknowledgement received. Set to ‘1’, when the slave receives a ACK (typically after the slave transmitted TX data)."],["I2C_ADDR_MATCH_R","Field `I2C_ADDR_MATCH` reader - I2C slave matching address received. If CTRL.ADDR_ACCEPT, the received address (including the R/W bit) is available in the RX FIFO. In the case of externally clocked address matching (CTRL.EC_AM_MODE is ‘1’) and internally clocked operation (CTRL.EC_OP_MODE is ‘0’), this field is set when the event is detected."],["I2C_ADDR_MATCH_W","Field `I2C_ADDR_MATCH` writer - I2C slave matching address received. If CTRL.ADDR_ACCEPT, the received address (including the R/W bit) is available in the RX FIFO. In the case of externally clocked address matching (CTRL.EC_AM_MODE is ‘1’) and internally clocked operation (CTRL.EC_OP_MODE is ‘0’), this field is set when the event is detected."],["I2C_ARB_LOST_R","Field `I2C_ARB_LOST` reader - I2C slave lost arbitration: the value driven on the SDA line is not the same as the value observed on the SDA line (while the SCL line is ‘1’). This should not occur, it represents erroneous I2C bus behavior. In case of lost arbitration, the I2C slave state machine abort the ongoing transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error."],["I2C_ARB_LOST_W","Field `I2C_ARB_LOST` writer - I2C slave lost arbitration: the value driven on the SDA line is not the same as the value observed on the SDA line (while the SCL line is ‘1’). This should not occur, it represents erroneous I2C bus behavior. In case of lost arbitration, the I2C slave state machine abort the ongoing transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error."],["I2C_BUS_ERROR_R","Field `I2C_BUS_ERROR` reader - I2C slave bus error (unexpected detection of START or STOP condition). This should not occur, it represents erroneous I2C bus behavior. In case of a bus error, the I2C slave state machine abort the ongoing transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error."],["I2C_BUS_ERROR_W","Field `I2C_BUS_ERROR` writer - I2C slave bus error (unexpected detection of START or STOP condition). This should not occur, it represents erroneous I2C bus behavior. In case of a bus error, the I2C slave state machine abort the ongoing transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error."],["I2C_GENERAL_R","Field `I2C_GENERAL` reader - I2C slave general call address received. If CTRL.ADDR_ACCEPT, the received address 0x00 (including the R/W bit) is available in the RX FIFO. In the case of externally clocked address matching (CTRL.EC_AM_MODE is ‘1’) and internally clocked operation (CTRL.EC_OP_MODE is ‘0’), this field is set when the event is detected."],["I2C_GENERAL_W","Field `I2C_GENERAL` writer - I2C slave general call address received. If CTRL.ADDR_ACCEPT, the received address 0x00 (including the R/W bit) is available in the RX FIFO. In the case of externally clocked address matching (CTRL.EC_AM_MODE is ‘1’) and internally clocked operation (CTRL.EC_OP_MODE is ‘0’), this field is set when the event is detected."],["I2C_NACK_R","Field `I2C_NACK` reader - I2C slave negative acknowledgement received. Set to ‘1’, when the slave receives a NACK (typically after the slave transmitted TX data)."],["I2C_NACK_W","Field `I2C_NACK` writer - I2C slave negative acknowledgement received. Set to ‘1’, when the slave receives a NACK (typically after the slave transmitted TX data)."],["I2C_START_R","Field `I2C_START` reader - I2C slave START received. Set to ‘1’, when START or REPEATED START event is detected. In the case of externally clocked address matching (CTRL.EC_AM_MODE is ‘1’) AND clock stretching is performed (till the internally clocked logic takes over) (I2C_CTRL.S_NOT_READY_ADDR_NACK is ‘0’), this field is NOT set. The Firmware should use INTR_S_EC.WAKE_UP, INTR_S.I2C_ADDR_MATCH and INTR_S.I2C_GENERAL."],["I2C_START_W","Field `I2C_START` writer - I2C slave START received. Set to ‘1’, when START or REPEATED START event is detected. In the case of externally clocked address matching (CTRL.EC_AM_MODE is ‘1’) AND clock stretching is performed (till the internally clocked logic takes over) (I2C_CTRL.S_NOT_READY_ADDR_NACK is ‘0’), this field is NOT set. The Firmware should use INTR_S_EC.WAKE_UP, INTR_S.I2C_ADDR_MATCH and INTR_S.I2C_GENERAL."],["I2C_STOP_R","Field `I2C_STOP` reader - I2C STOP event for I2C (read or write) transfer intended for this slave (address matching is performed). Set to ‘1’, when STOP or REPEATED START event is detected. The REPEATED START event is included in this interrupt cause such that the I2C transfers separated by a REPEATED START can be distinguished and potentially treated separately by the Firmware. Note that the second I2C transfer (after a REPEATED START) may be to a different slave address. The event is detected on any I2C transfer intended for this slave. Note that a I2C address intended for the slave (address is matching) will result in a I2C_STOP event independent of whether the I2C address is ACK’d or NACK’d."],["I2C_STOP_W","Field `I2C_STOP` writer - I2C STOP event for I2C (read or write) transfer intended for this slave (address matching is performed). Set to ‘1’, when STOP or REPEATED START event is detected. The REPEATED START event is included in this interrupt cause such that the I2C transfers separated by a REPEATED START can be distinguished and potentially treated separately by the Firmware. Note that the second I2C transfer (after a REPEATED START) may be to a different slave address. The event is detected on any I2C transfer intended for this slave. Note that a I2C address intended for the slave (address is matching) will result in a I2C_STOP event independent of whether the I2C address is ACK’d or NACK’d."],["I2C_WRITE_STOP_R","Field `I2C_WRITE_STOP` reader - I2C STOP event for I2C write transfer intended for this slave (address matching is performed). Set to ‘1’, when STOP or REPEATED START event is detected. The REPEATED START event is included in this interrupt cause such that the I2C transfers separated by a REPEATED START can be distinguished and potentially treated separately by the Firmware. Note that the second I2C transfer (after a REPEATED START) may be to a different slave address. In non EZ mode, the event is detected on any I2C write transfer intended for this slave. Note that a I2C write address intended for the slave (address is matching and a it is a write transfer) will result in a I2C_WRITE_STOP event independent of whether the I2C address is ACK’d or NACK’d. In EZ mode, the event is detected only on I2C write transfers that have EZ data written to the memory structure (an I2C write transfer that only communicates an I2C address and EZ address, will not result in this event being detected)."],["I2C_WRITE_STOP_W","Field `I2C_WRITE_STOP` writer - I2C STOP event for I2C write transfer intended for this slave (address matching is performed). Set to ‘1’, when STOP or REPEATED START event is detected. The REPEATED START event is included in this interrupt cause such that the I2C transfers separated by a REPEATED START can be distinguished and potentially treated separately by the Firmware. Note that the second I2C transfer (after a REPEATED START) may be to a different slave address. In non EZ mode, the event is detected on any I2C write transfer intended for this slave. Note that a I2C write address intended for the slave (address is matching and a it is a write transfer) will result in a I2C_WRITE_STOP event independent of whether the I2C address is ACK’d or NACK’d. In EZ mode, the event is detected only on I2C write transfers that have EZ data written to the memory structure (an I2C write transfer that only communicates an I2C address and EZ address, will not result in this event being detected)."],["INTR_S_SPEC","Slave interrupt request"],["R","Register `INTR_S` reader"],["SPI_BUS_ERROR_R","Field `SPI_BUS_ERROR` reader - SPI slave deselected at an unexpected time in the SPI transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error."],["SPI_BUS_ERROR_W","Field `SPI_BUS_ERROR` writer - SPI slave deselected at an unexpected time in the SPI transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error."],["SPI_EZ_STOP_R","Field `SPI_EZ_STOP` reader - SPI slave deselected after any EZ SPI transfer occurred."],["SPI_EZ_STOP_W","Field `SPI_EZ_STOP` writer - SPI slave deselected after any EZ SPI transfer occurred."],["SPI_EZ_WRITE_STOP_R","Field `SPI_EZ_WRITE_STOP` reader - SPI slave deselected after a write EZ SPI transfer occurred."],["SPI_EZ_WRITE_STOP_W","Field `SPI_EZ_WRITE_STOP` writer - SPI slave deselected after a write EZ SPI transfer occurred."],["W","Register `INTR_S` writer"]]});