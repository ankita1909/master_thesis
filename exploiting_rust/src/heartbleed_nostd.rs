use heapless::Vec; // fixed capacity `std::Vec`

pub fn heartbeat (s: [u8; 21]) -> Result<(), isize> 
{
    const PADDING: usize = 16;
    let mut p = s;
    let hbtype:u8 = p[0];
    let payload:usize = ((p[1] as usize) << 8) + p[2] as usize; 
    
   // let mut buffer: [u8;payload+PADDING]; //needs constant size of array, not allow using non constant value

   let mut buffer: [u8;15] = [0; 15]; 
    //buffer = &s[2..payload];
   //buffer = &s[2..21];
   //buffer = &mut p;
   //buffer.copy_from_slice(&s);
   
    //buffer.extend(p[3..3+payload].iter().cloned());             

    //_________________________________________________________

    let mut xs: Vec<u8, 8> = Vec::new();
    xs.extend_from_slice(&s[3 .. payload]);
    Ok(())


}